# Karabiner Elements Windows-to-Mac Mapping Project Rules

## Documentation Synchronization
**CRITICAL**: Whenever `karabiner.json` is modified, updated, or changed in any way, you MUST also update the `README.md` file to reflect those changes. This includes:
- New key mappings or shortcuts
- Modified keyboard behavior
- Added or removed rules
- Changes to terminal-specific behavior
- Updates to toggle combinations
- Any configuration modifications

The README must accurately document all functionality present in the karabiner.json configuration.

## Code Standards
- Never add comments in code unless explicitly requested
- Always provide complete, runnable code instead of placeholders
- Don't remove existing comments that are already present
- When editing JSON files, maintain proper formatting and structure

## Karabiner Configuration Guidelines
- Maintain rule priority order (higher priority rules first)
- Use descriptive rule names that explain the mapping purpose
- Include proper conditions for context-aware behavior
- Test terminal vs regular app detection when adding new mappings
- Preserve existing toggle functionality (fn + Control + Option + Command + E/D)

## Project Structure Maintenance
- Keep documentation in the `docs/` folder organized
- Use the `scripts/add-chat-log.sh` for development session logging
- Maintain the project structure as documented in README
- Update relevant documentation when adding new features

## Testing Requirements
When making configuration changes:
1. Test in regular applications (TextEdit, browser, etc.)
2. Test in terminal applications (Terminal.app, Warp)
3. Verify toggle functionality works
4. Check that shift variants work correctly
5. Ensure no conflicts with existing shortcuts

## Communication Style
- Ask clarifying questions when instructions are unclear
- Explain the impact of changes being made
- Provide testing instructions for new features
- Use clear, technical language appropriate for developers 